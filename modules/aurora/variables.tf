variable "stage" {
  description = "The name of the stage."
  type        = string
}

variable "project" {
  description = "Project name."
  type        = string
}

variable "vpc_name" {
  description = "Name of the VPC (after prefix)."
  type        = string
}

variable "vpc_cidr" {
  description = "CIDR of the database VPC."
  type        = string
}

variable "aurora_name" {
  description = "Name of the Aurora (after prefix)."
  type        = string
}

/*
Example:
  {
    auto_pause               = true
    min_capacity             = 2
    max_capacity             = 16
    seconds_until_auto_pause = 300
    timeout_action           = "ForceApplyCapacityChange"
  }
*/
variable "scaling_configuration" {
  description = "Map of nested attributes with scaling properties."
  type        = map(string)
  default     = {}
}

variable "preferred_backup_window" {
  description = "When to perform DB backups. Example: 02:00-03:00"
  type        = string
}

variable "preferred_maintenance_window" {
  description = "When to perform DB maintenance. Example: sun:05:00-sun:06:00"
  type        = string
}

variable "instances" {
  description = "Map of cluster instances and any specific/overriding attributes to be created"
  type        = any
  default     = {}
}

variable "public_subnet_cidrs" {
  description = "CIDR's of the public subnets."
  type        = list(string)
  default     = []
}

variable "private_subnet_cidrs" {
  description = "CIDR's of the private subnets."
  type        = list(string)
  default     = []
}

variable "allowed_cidr_blocks" {
  description = "Allowed CIDR blocks to connect to the database. Default is the whole database VPC."
  type        = list(string)
  default     = []
}

variable "apply_immediately" {
  description = "Determines whether or not any DB modifications are applied immediately, or during the maintenance window."
  type        = bool
  default     = true
}

variable "skip_final_snapshot" {
  description = "Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created."
  type        = bool
  default     = true
}

variable "database_engine_version" {
  description = "Engine version of the database."
  type        = string
  default     = "5.7"
}

variable "backup_retention_period" {
  description = "How long to keep backups for (in days)."
  type        = number
  default     = 7
}

variable "deletion_protection" {
  description = "If the DB instance should have deletion protection enabled."
  type        = bool
  default     = false
}

variable "iam_database_authentication_enabled" {
  description = "Specifies whether IAM Database authentication should be enabled or not. Not all versions and instances are supported."
  type        = bool
  default     = false
}

variable "username" {
  description = "Database username."
  type        = string
  default     = "root"
}

variable "password" {
  description = "Password for the database master user. Default is autogenerated."
  type        = string
  default     = ""
}

variable "create_vpce" {
  description = "Flag to control whether or not to create a vpce."
  type        = bool
  default     = true
}

variable "security_group_egress_rules" {
  description = "A map of security group egress rule definitions to add to the security group created"
  type        = map(any)
  default     = {}
}

variable "vpce_security_group_configuration" {
  description = "Security group configuration for the SSM VPC Endpoint function."
  type = object({
    ingress = object({
      from_port   = number
      to_port     = number
      protocol    = string
      cidr_blocks = list(string)
    })
    egress = object({
      from_port   = number
      to_port     = number
      protocol    = string
      cidr_blocks = list(string)
    })
  })
  default = null
}

variable "create_s3_gateway" {
  description = "Create a S3 Gateway for the private subnets to connect from VPC to S3."
  type        = bool
  default     = false
}

variable "create_nat" {
  description = "Create a NAT gateway in the public subnet for internet access from the private subnets."
  type        = bool
  default     = false
}

/*
  Audit log events:
    CONNECT – Logs both successful and failed connections and also disconnections. This event includes user information.
    QUERY – Logs all queries in plain text, including queries that fail due to syntax or permission errors.
    QUERY_DCL – Similar to the QUERY event, but returns only data control language (DCL) queries (GRANT, REVOKE, and so on).
    QUERY_DDL – Similar to the QUERY event, but returns only data definition language (DDL) queries (CREATE, ALTER, and so on).
    QUERY_DML – Similar to the QUERY event, but returns only data manipulation language (DML) queries (INSERT, UPDATE, and so on, and also SELECT).
    TABLE – Logs the tables that were affected by query execution.
*/
variable "advanced_log_configuration" {
  description = "Configures the database logging. Audit log events must be from CONNECT, QUERY, QUERY_DCL, QUERY_DDL, QUERY_DML and TABLE."
  type = object({
    error_log_retention      = number
    enable_general_log       = bool
    general_log_retention    = number
    enable_slow_query_log    = bool
    slow_query_log_retention = number
    enable_audit_log         = bool
    audit_log_retention      = number
    audit_log_events         = string
  })
  default = {
    error_log_retention      = 30
    enable_general_log       = false
    general_log_retention    = null
    enable_slow_query_log    = false
    slow_query_log_retention = null
    enable_audit_log         = false
    audit_log_retention      = null
    audit_log_events         = null
  }
}

variable "iam_roles" {
  description = "List of IAM role ARNs to attache to the cluster."
  type        = map(map(string))
  default     = {}
}

variable "aws_default_lambda_role" {
  description = "Default Lambda role ARN to invoke Lambda functions.."
  type        = string
  default     = null
}

data "aws_region" "current" {}

locals {
  prefix_env                      = terraform.workspace == "default" ? var.stage : terraform.workspace
  prefix                          = "${var.project}-${local.prefix_env}"
  vpc_name                        = "${local.prefix}-${var.vpc_name}"
  vpce_name                       = "${local.vpc_name}-vpce-ssm"
  aurora_name                     = "${local.prefix}-${var.aurora_name}"
  ssm_db_prefix                   = "database"
  ssm_path_tech_user_pw           = "/${var.project}/${local.prefix_env}/${local.ssm_db_prefix}/tech-user-pwd"
  ssm_path_tech_user_name         = "/${var.project}/${local.prefix_env}/${local.ssm_db_prefix}/tech-user-name"
  ssm_path_tech_ro_user_pw        = "/${var.project}/${local.prefix_env}/${local.ssm_db_prefix}/tech-ro-user-pwd"
  ssm_path_tech_ro_user_name      = "/${var.project}/${local.prefix_env}/${local.ssm_db_prefix}/tech-ro-user-name"
  ssm_path_root_user_pw           = "/${var.project}/${local.prefix_env}/${local.ssm_db_prefix}/root-user-pwd"
  ssm_path_root_user_name         = "/${var.project}/${local.prefix_env}/${local.ssm_db_prefix}/root-user-name"
  ssm_path_admin_users            = "/${var.project}/${local.prefix_env}/${local.ssm_db_prefix}/admin-users/"
  ssm_path_restricted_admin_users = "/${var.project}/${local.prefix_env}/${local.ssm_db_prefix}/restricted-admin-users/"
  ssm_path_readonly_users         = "/${var.project}/${local.prefix_env}/${local.ssm_db_prefix}/readonly-users/"
  default_tags = {
    stage        = var.stage
    project      = var.project
    tf_workspace = terraform.workspace
  }
}
